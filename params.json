{"name":"Typejector","tagline":"Standalone, powerful dependency injector for TypeScript and Javascript","body":"# Typejector\r\nStandalone, powerful dependency injector for TypeScript and Javascript\r\n\r\n##Requirement\r\nEcmaScript 5 or higer and Typescript 1.5 beta or higer\r\n\r\n##How it use?\r\nAll you need are several annotation\r\n- @injection - annotation for class that should be imported\r\n- @inject - annotation for property in class for which you want to insert the dependence\r\n- @resolve - annotation for class, where exist @inject annotations\r\n\r\n###Example of code\r\n```ts\r\nmodule Typejector.Sample {\r\n    import resolve = Annotation.resolve;\r\n    import inject = Annotation.inject;\r\n    import injection = Annotation.injection;\r\n\r\n\r\n    @injection\r\n    class SingletonClass {\r\n        public cat: string = \"Kitty\";\r\n        public dog: string = \"Hot\";\r\n\r\n        public say() {\r\n            alert(`${this.cat}-Cat and ${this.dog}-Dog`);\r\n        }\r\n    }\r\n    @injection\r\n    class SimpleClass {\r\n        public say(something: string) {\r\n            alert(`You said ${something}?`);\r\n        }\r\n    }\r\n\r\n    @resolve\r\n    class NeedInjectionsClass {\r\n        @inject(SingletonClass)\r\n        public helper: SingletonClass;\r\n        @inject(SimpleClass)\r\n        public simpleHelper: SimpleClass;\r\n\r\n        constructor() {\r\n            this.helper.say();\r\n            this.simpleHelper.say(\"wow\");\r\n        }\r\n    }\r\n\r\n    class ChildClass extends NeedInjectionsClass {\r\n\r\n    }\r\n\r\n    var needInjection = new ChildClass();\r\n}\r\n```\r\n\r\n##Signature\r\n1. In this case someClass is Singleton by default\r\n```ts\r\n@injection\r\nclass someClass {\r\n}\r\n```\r\n2. In this case in all dependencies of someClass2 are unique instances\r\n```ts\r\n@injection(false)\r\nclass someClazz {\r\n}\r\n```\r\n","google":"UA-62506878-2","note":"Don't delete this file! It's used internally to help with page regeneration."}